(meta (require! (lit File-system) "kit-file-system"
                Path 'path)

      (var docs (.load File-system "./docs"))

      (namespace docs)

      (def macros.example (...body)
        (if (> body.length 1)
            `(+ "\n\n```javascript\n"
                ...@(.map body (=> (el) `(+ (quote @el) "\n")))
                "\n\n```\n")
            `(+ "`"
               (quote @el)
               "`")
            ))
      (def macros.pre (el)
        `(+ "`" (quote @el) "`"))

      (var eval-ast-node (#-> transpile (get 'contents) (output-formatter) eval ))
      (macro template-string (s)
             ["`\n"
              s
              "`\n"])

      (def macros.doc-string (title args ...doc-nodes)
           (var title-string (eval-ast-node title)
                arg-string (eval-ast-node args)
                doc-string (.join (.map doc-nodes eval-ast-node) "\n")
                file-path (+ (.replace title-string (regex "\\." "g") "/" ) ".md")
                )
           (print "doc string" doc-string)

           (.set docs file-path
                 (.join [ ("# " title-string)
                          "## arguments"
                          arg-string
                          "## description"
                          doc-string] "\n\n"))
           ["`\n"
            (+ (.replace title-string (regex "\\." "g") "/" ) ".md")
            "\n\n"
            (.join [ ("# " title-string)
                     "## arguments"
                     arg-string
                     "## description"
                     (.replace doc-string (regex "`" "g") "\\`")] "\n\n")
            "`\n\n"
            ]))
