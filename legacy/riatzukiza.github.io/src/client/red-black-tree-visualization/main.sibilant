(namespace tests)

(include "kit/header" )
(import-namespace kit)

(include "kit-interface/header" )
(import-namespace interface)

(include "../../../inc/rand.sibilant")
(include "../../../inc/misc.sibilant")
(include "../../../inc/docs.sibilant")
(import-namespace docs)

(set global 'mixin mixin 'create create)
(require! (lit Binary-search-tree) "@shared/data-structures/trees/binary-search-tree.js"
          (lit Red-black-tree) "@shared/data-structures/trees/red-black-tree.js"
          (lit Ticker) "@shared/ticker.js"
          )

(include "../../../inc/dom.sibilant")
(import-namespace dom)

(const rb-tree (.spawn Red-black-tree))


(const low (random-int 9000))
(const high (+ low (random-int 10000)))
(def render-node (node )
  (const foreground-color (if node.in-range?
                              "yellow"
                              (= node.color "black")
                              "white"
                              "black"))
  (dom (.div  .style (lit ("background-color" node.color)
                                  ("color" foreground-color)
                                  ("float" "left")
                                  ("width" (if node.sibling
                                               "calc(50% - 4px)"
                                               "calc(100% - 4px)"
                                               ))
                                  ("border-color" foreground-color)
                                  ("border-width" "2px")
                                  ("border-style" "solid"))
              (.div (or node.key "nil"))
             (if node.left (render-node node.left) "")
             (if node.right (render-node node.right) "")))
  )

(const ticker ((create Ticker) 1))
(.start ticker)
(const container (dom (.div .id "container" .style (lit ("width" (+ window.innerWidth "px")))
                        (.h1 "find nodes between" low "and" high)
                        (-> (render-node rb-tree.root )))))
(const frame (with-dom  Document-body (.div .id 'frame container)))


(on ticker.events 'tick ()

    (.insert rb-tree.root (random-int (+ low high)))

    (const nodes-in-range (.find-range rb-tree.root low high))
    (for-of! *node nodes-in-range
             (assign *node.in-range? true))
    (.render  container ))

