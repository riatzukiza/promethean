"""
Configuration constants for the Whisper NPU pipeline.

All hard‑coded values from the original implementation have been moved
into this dataclass.  Users can instantiate a ``Config`` and override
parameters as required.
"""

from dataclasses import dataclass
from pathlib import Path
from typing import Optional


@dataclass
class Config:
    """Configuration for the Whisper‑NPU pipeline.

    Parameters
    ----------
    sample_rate: int
        The desired sample rate for the audio input.
    n_fft: int
        FFT window size for computing mel spectrograms.
    hop_length: int
        Hop length between successive FFT windows.
    n_mels: int
        Number of mel bins.  Only 80 or 128 are supported by the
        pre‑computed filter bank shipped with Whisper.
    chunk_length: int
        Duration (in seconds) of each chunk used when breaking
        long audio into pieces.
    max_tokens: int
        Maximum number of tokens generated by the decoder.
    beam_size: int
        Number of beams to keep during beam search.
    encoder_model: Path
        Path to the OpenVINO encoder model.
    cross_kv_model: Path
        Path to the OpenVINO encoder‑decoder cross‑key/value model.
    decoder_model: Path
        Path to the OpenVINO decoder model.
    device: str
        Name of the OpenVINO device to run inference on.  ``"NPU"`` or
        ``"AUTO"`` are typical values depending on your hardware.
    """

    sample_rate: int = 16000
    n_fft: int = 400
    hop_length: int = 160
    n_mels: int = 80
    chunk_length: int = 30
    max_tokens: int = 224
    beam_size: int = 5
    encoder_model: Optional[Path] = None
    cross_kv_model: Optional[Path] = None
    decoder_model: Optional[Path] = None
    device: str = "NPU"

    def n_samples(self) -> int:
        """Return the number of raw audio samples per chunk."""
        return self.sample_rate * self.chunk_length

    def n_frames(self) -> int:
        """Return the expected number of frames per mel spectrogram."""
        return self.n_samples() // self.hop_length